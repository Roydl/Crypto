namespace Roydl.Crypto.Test
{
    using System;
    using System.IO;
    using BinaryToText;
    using NUnit.Framework;

    [TestFixture]
    public class BinaryToTextTests
    {
        private static void TestHelper(BinaryToTextEncoding algorithm, string originalText, string expectedCode)
        {
            var str = originalText.Encode(algorithm);
            Assert.AreEqual(expectedCode, str);

            str = str.DecodeString(algorithm);
            Assert.AreEqual(originalText, str);

            var path = $".\\testFileBinaryToText.{algorithm}";
            var buffer = new byte[ushort.MaxValue];
            new Random().NextBytes(buffer);
            File.WriteAllBytes(path, buffer);
            str = path.EncodeFile(algorithm);
            Assert.IsTrue(str?.Length > ushort.MaxValue);

            var bytes = str.Decode(algorithm);
            Assert.AreEqual(buffer, bytes);
            File.Delete(path);
        }

        [Test]
        [TestCase(TestOf = typeof(Base32))]
        public void Base32Test1() => TestHelper(BinaryToTextEncoding.Base32, Vars.TestText1, "K5SSA23ON53SA53IMF2CA53FEBQXEZJMEBRHK5BANNXG65ZANZXXIIDXNBQXIIDXMUQG2YLZEBRGKLQ=");

        [Test]
        [TestCase(TestOf = typeof(Base32))]
        public void Base32Test2() => TestHelper(BinaryToTextEncoding.Base32, Vars.TestText

        [Test]
        [TestCase(TestOf = typeof(Base64))]
        public void Base64Test1() => TestHelper(BinaryToTextEncoding.Base64, Vars.TestText1, "V2Uga25vdyB3aGF0IHdlIGFyZSwgYnV0IGtub3cgbm90IHdoYXQgd2UgbWF5IGJlLg==");

        [Test]
        [TestCase(TestOf = typeof(Base64))]
        public void Base64Test2() => TestHelper(BinaryToTextEncoding.Base64, Vars.TestText2, "AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn/CgMKBwoLCg8KEwoXChsKHwojCicKKwovCjMKNwo7Cj8KQwpHCksKTwpTClcKWwpfCmMKZwprCm8Kcwp3CnsKfwqDCocKiwqPCpMKlwqbCp8KowqnCqsKrwqzCrcKuwq/CsMKxwrLCs8K0wrXCtsK3wrjCucK6wrvCvMK9wr7Cv8OAw4HDgsODw4TDhcOGw4fDiMOJw4rDi8OMw43DjsOPw5DDkcOSw5PDlMOVw5bDl8OYw5nDmsObw5zDncOew5/DoMOhw6LDo8Okw6XDpsOnw6jDqcOqw6vDrMOtw67Dr8Oww7HDssOzw7TDtcO2w7fDuMO5w7rDu8O8w73Dvg==");

        [Test]
        [TestCase(TestOf = typeof(Base85))]
        public void Base85Test1() => TestHelper(BinaryToTextEncoding.Base85, Vars.TestText1, "=(NLiDJs_AGA(E,+EqB>@<,p1+C]J8+DYk5G9CdAF<Gd@@<<W9AKYhuGp$R-/c");

        [Test]
        [TestCase(TestOf = typeof(Base85))]
        public void Base85Test2() => TestHelper(BinaryToTextEncoding.Base85, Vars.TestText2, "!!*-'\"9eu7#RLhG$k3[W&.oNg'GVB\"(`=52*$$(B+<_pR,UFcb-n-Vr/1iJ-0JP==1c70M3&s#]4?Ykm5X@_(6q'R884cEH9MJ8X:f1+h<)lt#=BSg3>[:ZC?t!MSA7]@cBPD3sCi+'.E,fo>FEMbNG^4U^I!pHn_LTLS_LfXW_M#d[_M5p__MH'c_MZ3g_Ml?k_N)Ko_N;Ws_NMd\"_N_p&_Nr'*_O/3._OA?2_OSK6_OeW:_P\"c>_P4oB_PG&F_PY2J_Pk>N_Q(JR_Q:VV_QLbZ_Q^n^_Qq%b_R.1f_R@=j_RRIn_RdUr_S!b!_S3n%_goXU_h,dY_h>p]_hQ'a_hc3e_hu?i_i2Km_iDWq_iVcu_ihp$_j&'(_j83,_jJ?0_j\\K4_jnW8_k+c<_k=o@_kP&D_kb2H_kt>L_l1JP_lCVT_lUbX_lgn\\_m%%`_m71d_mI=h_m[Il_mmUp_n*at_n<n#_nH");

        [Test]
        [TestCase(TestOf = typeof(Base91))]
        public void Base91Test1() => TestHelper(BinaryToTextEncoding.Base91, Vars.TestText1, "CPh+7=;p%y^4axlLiPgZo@(*7FI;KF9llrtKp={Y%y^4axlLiPgZv)8CY!X%A");

        [Test]
        [TestCase(TestOf = typeof(Base91))]
        public void Base91Test2() => TestHelper(BinaryToTextEncoding.Base91, Vars.TestText2, ":C#(:C?hVB$MSiVEwndBAMZRxwFfBB;IW<}YQV!A_v$Y_c%zr4cYQPFl0,@heMAJ<:N[*T+.SFGr*`b4PD}vgYqU>cW0P*1NwV,O{cQ5u0m900[8@n4,wh?DP<2+~jQSW6nmLm1o-J,?jTs%2<WF%qb=oh|}EO6WrCFfk)GH!4EEDmT?yDvcowYe4_-ufO_Y*Ud|l)TH;5RNOVTi5DIdB1<&JR<u5OTbEnz1n)gH}6eWZEV?#D8d15jN4n?u^Otde5.Tp)tHK8rfm=Ui+DVeO!|xL!]uSP,f4;G<q)6HX94ox8W?<D.e&&w{5_6v$T;(@Dgq))[JZ?)E!rii}E:n-wIhRRuv\"TK+PW2I+)DKm@[N.ak?DFjoh18*#nxvZUk-po>$,)QKz[DX_JkiKF|o`5TQT!0vzU!:(6Jf.)dK$]QgG^l?QFwpu!,0%_3v=U}<C=h|:)qK=^dpR&liXFJqH(");

        [Test]
        [TestCase(TestOf = typeof(Radix2))]
        public void Radix2Test1() => TestHelper(BinaryToTextEncoding.Radix2, Vars.TestText1, "01010111011001010010000001101011011011100110111101110111001000000111011101101000011000010111010000100000011101110110010100100000011000010111001001100101001011000010000001100010011101010111010000100000011010110110111001101111011101110010000001101110011011110111010000100000011101110110100001100001011101000010000001110111011001010010000001101101011000010111100100100000011000100110010100101110");

        [Test]
        [TestCase(TestOf = typeof(Radix2))]
        public void Radix2Test2() => TestHelper(BinaryToTextEncoding.Radix2, Vars.TestText

        [Test]
        [TestCase(TestOf = typeof(Radix8))]
        public void Radix8Test1() => TestHelper(BinaryToTextEncoding.Radix8, Vars.TestText1, "127145040153156157167040167150141164040167145040141162145054040142165164040153156157167040156157164040167150141164040167145040155141171040142145056");

        [Test]
        [TestCase(TestOf = typeof(Radix8))]
        public void Radix8Test2() => TestHelper(BinaryToTextEncoding.Radix8, Vars.TestText2, "000001002003004005006007010011012013014015016017020021022023024025026027030031032033034035036037040041042043044045046047050051052053054055056057060061062063064065066067070071072073074075076077100101102103104105106107110111112113114115116117120121122123124125126127130131132133134135136137140141142143144145146147150151152153154155156157160161162163164165166167170171172173174175176177302200302201302202302203302204302205302206302207302210302211302212302213302214302215302216302217302220302221302222302223302224302225302226302227302230302231302232302233302234302235302236302237302240302241302242302243302244302245302246302247302250302251302252302253302254302255302256302257302260302261302262302263302264302265302266302267302270302271302272302273302274302275302276302277303200303201303202303203303204303205303206303207303210303211303212303213303214303215303216303217303220303221303222303223303224303225303226303227303230303231303232303233303234303235303236303237303240303241303242303243303244303245303246303247303250303251303252303253303254303255303256303257303260303261303262303263303264303265303266303267303270303271303272303273303274303275303276");

        [Test]
        [TestCase(TestOf = typeof(RadixA))]
        public void RadixATest1() => TestHelper(BinaryToTextEncoding.RadixA, Vars.TestText1, "087101032107110111119032119104097116032119101032097114101044032098117116032107110111119032110111116032119104097116032119101032109097121032098101046");

        [Test]
        [TestCase(TestOf = typeof(RadixA))]
        public void RadixATest2() => TestHelper(BinaryToTextEncoding.RadixA, Vars.TestText2, "000001002003004005006007008009010011012013014015016017018019020021022023024025026027028029030031032033034035036037038039040041042043044045046047048049050051052053054055056057058059060061062063064065066067068069070071072073074075076077078079080081082083084085086087088089090091092093094095096097098099100101102103104105106107108109110111112113114115116117118119120121122123124125126127194128194129194130194131194132194133194134194135194136194137194138194139194140194141194142194143194144194145194146194147194148194149194150194151194152194153194154194155194156194157194158194159194160194161194162194163194164194165194166194167194168194169194170194171194172194173194174194175194176194177194178194179194180194181194182194183194184194185194186194187194188194189194190194191195128195129195130195131195132195133195134195135195136195137195138195139195140195141195142195143195144195145195146195147195148195149195150195151195152195153195154195155195156195157195158195159195160195161195162195163195164195165195166195167195168195169195170195171195172195173195174195175195176195177195178195179195180195181195182195183195184195185195186195187195188195189195190");

        [Test]
        [TestCase(TestOf = typeof(RadixF))]
        public void RadixFTest1() => TestHelper(BinaryToTextEncoding.RadixF, Vars.TestText1, "5765206b6e6f772077686174207765206172652c20627574206b6e6f77206e6f742077686174207765206d61792062652e");

        [Test]
        [TestCase(TestOf = typeof(RadixF))]
        public void RadixFTest2() => TestHelper(BinaryToTextEncoding.RadixF, Vars.TestText2, "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7fc280c281c282c283c284c285c286c287c288c289c28ac28bc28cc28dc28ec28fc290c291c292c293c294c295c296c297c298c299c29ac29bc29cc29dc29ec29fc2a0c2a1c2a2c2a3c2a4c2a5c2a6c2a7c2a8c2a9c2aac2abc2acc2adc2aec2afc2b0c2b1c2b2c2b3c2b4c2b5c2b6c2b7c2b8c2b9c2bac2bbc2bcc2bdc2bec2bfc380c381c382c383c384c385c386c387c388c389c38ac38bc38cc38dc38ec38fc390c391c392c393c394c395c396c397c398c399c39ac39bc39cc39dc39ec39fc3a0c3a1c3a2c3a3c3a4c3a5c3a6c3a7c3a8c3a9c3aac3abc3acc3adc3aec3afc3b0c3b1c3b2c3b3c3b4c3b5c3b6c3b7c3b8c3b9c3bac3bbc3bcc3bdc3be");
    }
}
